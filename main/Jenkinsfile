#!/usr/bin/env groovy

import groovy.json.JsonOutput

properties(
  [
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '5',
        artifactNumToKeepStr: '1',
        daysToKeepStr: '3',
        numToKeepStr: '3'
      )
    ),
    disableConcurrentBuilds(),
    gitLabConnection('sami-git')
  ]
)

// Global variables
currentStageName = ''

// ### Project-Specific Configuration ##

// GIT
def gitSource = 'git@git.sami.int.thomsonreuters.com:myna/myna-flyway.git'
def masterBranchName = 'develop'
def gitCredentialsId = 'git_ssh_key'

def environment = params.environment
def schema = params.schema
def command = params.command

try {
  node {
    // echo '\u2600 Environment Variables'
    // sh 'env'
    
    stage('Preparation') {
      echo '\u2756 Preparation'
      echo "\u2600 BUILD_URL=${env.BUILD_URL}"
      def workspace = pwd()
      echo "\u2600 workspace=${workspace}"

      checkout(
          [
            $class: 'GitSCM',
            branches:
              [[
                name: '*/develop'
              ]],
            doGenerateSubmoduleConfigurations: false,
            extensions:
              [[
                 $class: 'SubmoduleOption',
                 disableSubmodules: false,
                 parentCredentials: true,
                 recursiveSubmodules: true,
                 reference: '',
                 trackingSubmodules: false
              ]],
            gitTool: 'Default',
            submoduleCfg: [],
            userRemoteConfigs:
              [[
                credentialsId: gitCredentialsId,
                url: gitSource
              ]]
          ]
      )

      currentStageName = 'Preparation'
    }

    stage('Flyway') {
      echo '\u2756 Flyway'

      echo "\u2600 parameter environment = " + environment
      echo "\u2600 parameter schema = " + schema
      echo "\u2600 parameter command = " + command

      if (environment != '' && schema != '' && command != '') {
        withMaven(
          maven: 'maven',
          mavenSettingsConfig: 'myna-maven-settings'
        ){
          // Run Build Commands
          sh """
            cd main
            mvn -P ${params.environment} -pl ${params.schema} flyway:${params.command}
          """
        }
      } else {
        currentBuild.result = 'ABORTED'
        error('one or more parameters are not provided.')
      }

      currentStageName = 'Flyway'
    }
    
  }

  currentBuild.result = 'SUCCESS'
} catch (exc) {
  currentBuild.result = 'FAILURE'
  throw exc
}